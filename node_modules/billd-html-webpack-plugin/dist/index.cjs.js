'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var child_process = require('child_process');
var fs = require('fs');
var nodePath = require('path');
var webpack = require('webpack');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var nodePath__default = /*#__PURE__*/_interopDefaultLegacy(nodePath);
var webpack__default = /*#__PURE__*/_interopDefaultLegacy(webpack);

var version$1 = "1.0.6";

const chalk = require('chalk');
const errorLog = function (error) {
  let isThrow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (error instanceof Error) {
    console.log(error);
  }
  console.log(`${chalk.bgRedBright.black(' billd-html-webpack-plugin ERROR')}  ${chalk.redBright(error)}`);
  if (isThrow) {
    throw new Error(error);
  }
};

const defaultLogData = {
  pkgName: '',
  pkgVersion: '',
  pkgRepository: '',
  commitSubject: '',
  commitBranch: '',
  committerDate: '',
  commitHash: '',
  committerName: '',
  committerEmail: '',
  lastBuildDate: new Date().toLocaleString(),
  nodeVersion: ''
};
const templateStr = `
;(function(){
var log = function (title, value) {
  console.log(
    '%c ' + title + ' %c ' + value + ' ' + '%c',
    'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff',
    'background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff',
    'background:transparent'
  );
};

log('pkg名称:', {pkgName});
log('pkg版本:', {pkgVersion});
log('pkg仓库:', {pkgRepository});
log('git提交主题:', {commitSubject});
log('git提交分支:', {commitBranch});
log('git提交日期:', {committerDate});
log('git提交哈希:', {commitHash});
log('git提交者名字:', {committerName});
log('git提交者邮箱:', {committerEmail});
log('node版本:', {nodeVersion});
log('最后构建日期:', {lastBuildDate});
log('Powered by:', 'billd-html-webpack-plugin v${version$1}');
log('billd-html-webpack-plugin:', 'https://www.npmjs.com/package/billd-html-webpack-plugin');
})();
`;
const cmdMap = {
  commitSubject: 'git show -s --format=%s',
  commitBranch: 'git branch --show-current',
  committerDate: 'git show -s --format=%ci',
  commitHash: 'git show -s --format=%H',
  committerName: 'git show -s --format=%cn',
  committerEmail: 'git show -s --format=%ce',
  nodeVersion: 'node -v'
};
function updateDefaultLogData() {
  // https://git-scm.com/docs/git-show
  try {
    var _pkg$repository;
    const pkg = JSON.parse(fs.readFileSync(nodePath__default["default"].join(process.cwd(), 'package.json')).toString());
    defaultLogData.pkgName = pkg === null || pkg === void 0 ? void 0 : pkg.name;
    defaultLogData.pkgVersion = pkg === null || pkg === void 0 ? void 0 : pkg.version;
    defaultLogData.pkgRepository =
    // @ts-ignore
    typeof (pkg === null || pkg === void 0 ? void 0 : pkg.repository) === 'object' ? pkg === null || pkg === void 0 ? void 0 : (_pkg$repository = pkg.repository) === null || _pkg$repository === void 0 ? void 0 : _pkg$repository.url : pkg === null || pkg === void 0 ? void 0 : pkg.repository;
    Object.keys(cmdMap).forEach(key => {
      try {
        defaultLogData[key] = child_process.execSync(cmdMap[key]).toString().trim();
      } catch (error) {
        errorLog(error);
      }
    });
  } catch (error) {
    errorLog(error);
  }
}
const replaceKeyFromValue = (str, obj) => {
  let res = str;
  Object.keys(obj).forEach(v => {
    res = res.replace(new RegExp(`{${v}}`, 'ig'), obj[v]);
  });
  return res;
};
const logData = log => {
  updateDefaultLogData();
  const tmpData = JSON.parse(JSON.stringify(defaultLogData));
  if (log) {
    Object.keys(tmpData).forEach(item => {
      tmpData[item] = log[item] === false ? '-' : tmpData[item];
    });
  }
  return tmpData;
};
const logInfo = log => {
  updateDefaultLogData();
  const tmpData = JSON.parse(JSON.stringify(defaultLogData));
  if (log) {
    Object.keys(tmpData).forEach(item => {
      tmpData[item] = log[item] === false ? JSON.stringify('-') : JSON.stringify(tmpData[item]);
    });
  }
  return replaceKeyFromValue(templateStr.toString(), tmpData);
};

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply$5 {
  reg = /static\/chunks\/webpack/;

  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log
    } = _ref;
    compiler.hooks.emit.tap(pluginName,
    /**
     * @param {WebpackCompilation} compilation
     */
    compilation => {
      Object.keys(compilation.assets).forEach(data => {
        const content = compilation.assets[data].source();
        if (this.reg.exec(data)) {
          const str = logInfo(log) + content;
          // @ts-ignore
          compilation.assets[data] = {
            source() {
              return str;
            },
            size() {
              return str.length;
            }
          };
        }
      });
    });
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply$4 {
  clientReg = /\/client\.js$/;
  serverReg = /\/server\.js$/;
  arr = [];

  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log,
      NODE_ENV = process.env.NODE_ENV
    } = _ref;
    const info = logInfo(log);
    const isDev = NODE_ENV === 'development';
    if (!isDev) {
      // @ts-ignore
      compiler.hooks.entryOption.tap(pluginName, (context, entry) => {
        // win环境下，entry.app的值可能是：
        // [                                                                                                                                     18:24:55
        //   'C:/ldmnq/nuxt/node_modules/.pnpm/@nuxt+components@2.2.1/node_modules/@nuxt/components/lib/installComponents.js',
        //   'C:\\ldmnq\\nuxt\\.nuxt\\server.js'
        // ]
        this.arr = entry.app.map(val => val.replace(/\\\\/g, '/'));
      });
      compiler.hooks.done.tapAsync(pluginName, (compilation, callback) => {
        this.arr.forEach(path => {
          if (this.clientReg.exec(path)) {
            const path1 = path.replace(this.clientReg, '');
            const htmlpath = nodePath__default["default"].join(path1, 'dist', 'server', 'index.spa.html');
            const str = fs.readFileSync(htmlpath).toString();
            const str1 = str.replace('</head>', `<script>${info}</script></head>`);
            fs.writeFileSync(htmlpath, str1);
          }
          if (this.serverReg.exec(path)) {
            const path1 = path.replace(this.serverReg, '');
            const htmlpath = nodePath__default["default"].join(path1, 'dist', 'server', 'index.ssr.html');
            const str = fs.readFileSync(htmlpath).toString();
            const str1 = str.replace('</head>', `<script>${info}</script></head>`);
            fs.writeFileSync(htmlpath, str1);
          }
        });
        callback();
      });
    } else {
      compiler.hooks.emit.tap(pluginName, compilation => {
        Object.keys(compilation.assets).forEach(name => {
          if (name === 'app.js') {
            // 获取之前的内容
            const contens = compilation.assets[name].source();
            const str = info + contens;
            // @ts-ignore
            compilation.assets[name] = {
              source: () => str,
              size: () => str.length
            };
          }
        });
      });
    }
  }
}

/** @typedef {import("rollup").Plugin} PluginContext */
class PluginConfig$2 {
  constructor(_ref) {
    let {
      pluginName,
      log
    } = _ref;
    let entry;
    const info = logInfo(log);

    /** @type {Plugin} */
    const plugin = {
      name: pluginName,
      configResolved(config) {
        // @ts-ignore
        entry = config.entry;
      },
      transform(code, id) {
        if (id.indexOf(entry) !== -1) {
          const str1 = `if (process.client) {${info}}\n${code}`;
          return {
            code: str1
          };
        }
      }
      /**
       * @param {PluginContext} ctx
       * @param {PluginContext} opt
       * @param {PluginContext} bundle
       * @param {Boolean} iswrite
       */
      // writeBundle(ctx, opt, bundle, iswrite) {
      //   console.log('writeBundlewriteBundle');
      //   Object.keys(opt).forEach((id) => {
      //     if (id.match(/.html$/)) {
      //       /** @type {OutputAsset} */
      //       const asset = opt[id];
      //       // @ts-ignore
      //       const newstr = asset.source.replace(
      //         '</head>',
      //         `<script>${logInfo(log)}</script></head>`
      //       );
      //       fs.writeFileSync(path.resolve(outDir, asset.fileName), newstr);
      //     }
      //   });
      // },
    };

    return plugin;
  }
}

/** @typedef {import("rollup").Plugin} PluginContext */
class PluginConfig$1 {
  constructor(_ref) {
    let {
      pluginName,
      log
    } = _ref;
    let entry;
    const info = logInfo(log);

    /** @type {Plugin} */
    const plugin = {
      name: pluginName,
      configResolved(resolvedConfig) {
        // @ts-ignore
        const str1 = resolvedConfig.build.rollupOptions.input.entry;
        const url = str1 === null || str1 === void 0 ? void 0 : str1.split('?')[0];
        if (url) {
          entry = url;
        }
      },
      transform(code, id) {
        const str = id === null || id === void 0 ? void 0 : id.split('?')[0];
        if (entry === str) {
          const str1 = code.replace('if (process.client) {', `if (process.client) {${info}\n`);
          return {
            code: str1
          };
        }
      }
    };
    return plugin;
  }
}

/** @typedef {import("vite").Plugin} Plugin */
class PluginConfig {
  constructor(_ref) {
    let {
      pluginName,
      log
    } = _ref;
    const str = logInfo(log);
    /** @type {Plugin} */
    const plugin = {
      name: pluginName,
      /**
       * transformIndexHtml是vite插件独有的钩子，nuxt3基于vite，直接使用transformIndexHtml这个钩子即可
       * https://cn.vitejs.dev/guide/api-plugin.html#transformindexhtml
       */
      transformIndexHtml(html) {
        return html.replace('</head>', `<script>${str}</script></head>`);
      }
    };
    return plugin;
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply$3 {
  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log
    } = _ref;
    compiler.hooks.emit.tap(pluginName,
    /**
     * @param {WebpackCompilation} compilation
     */
    compilation => {
      // [DEP_WEBPACK_COMPILATION_ASSETS] DeprecationWarning: Compilation.assets will be frozen in future, all modifications are deprecated.
      // 即webpack5不推荐使用compilation.assets来修改资产，使用Compilation.hooks.processAssets来替换
      Object.keys(compilation.assets).forEach(data => {
        const content = compilation.assets[data].source();
        if (data.match(/.html$/)) {
          // @ts-ignore
          const str = content.replace('</head>', `<script>${logInfo(log)}</script></head>`);
          // @ts-ignore
          compilation.assets[data] = {
            source() {
              return str;
            },
            size() {
              return str.length;
            }
          };
        }
      });
    });
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply$2 {
  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log
    } = _ref;
    compiler.hooks.compilation.tap(pluginName,
    /**
     * @param {WebpackCompilation} compilation
     */
    compilation => {
      compilation.hooks.processAssets.tapAsync({
        name: pluginName,
        stage: webpack__default["default"].Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,
        // 在编译中添加额外的 asset。
        additionalAssets: true
      }, (assets, cb) => {
        Object.entries(assets).forEach(_ref2 => {
          let [pathname, source] = _ref2;
          if (pathname.match(/.html$/)) {
            // source._value有可能是一个buffer，因此需要toString()
            // @ts-ignore
            // eslint-disable-next-line
            const str = source._value.toString().replace('</head>', `<script>${logInfo(log)}</script></head>`);
            // @ts-ignore
            // eslint-disable-next-line
            source._value = str;
          }
        });
        cb();
      });
    });
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply$1 {
  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log
    } = _ref;
    compiler.hooks.emit.tap(pluginName,
    /**
     * @param {WebpackCompilation} compilation
     */
    compilation => {
      // [DEP_WEBPACK_COMPILATION_ASSETS] DeprecationWarning: Compilation.assets will be frozen in future, all modifications are deprecated.
      // 即webpack5不推荐使用compilation.assets来修改资产，使用Compilation.hooks.processAssets来替换
      Object.keys(compilation.assets).forEach(data => {
        const content = compilation.assets[data].source();
        if (data.match(/.html$/)) {
          // @ts-ignore
          const str = content.replace('</head>', `<script>${logInfo(log)}</script></head>`);
          // @ts-ignore
          compilation.assets[data] = {
            source() {
              return str;
            },
            size() {
              return str.length;
            }
          };
        }
      });
    });
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class PluginApply {
  /**
   * @param {WebpackCompiler} compiler
   */
  constructor(compiler, _ref) {
    let {
      pluginName,
      log
    } = _ref;
    compiler.hooks.compilation.tap(pluginName,
    /**
     * @param {WebpackCompilation} compilation
     */
    compilation => {
      compilation.hooks.processAssets.tapAsync({
        name: pluginName,
        stage: webpack__default["default"].Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,
        // 在编译中添加额外的 asset。
        additionalAssets: true
      }, (assets, cb) => {
        Object.entries(assets).forEach(_ref2 => {
          let [pathname, source] = _ref2;
          if (pathname.match(/.html$/)) {
            // webpack5的某些版本的PROCESS_ASSETS_STAGE_ADDITIONAL阶段的source会没有_value
            // eslint-disable-next-line
            if (source._value) {
              // source._value有可能是一个buffer，因此需要toString()
              // eslint-disable-next-line
              const str = source._value.toString().replace('</head>', `<script>${logInfo(log)}</script></head>`);
              // eslint-disable-next-line
              source._value = str;
            }
          }
        });
        cb();
      });
    });
  }
}

/** @typedef {import("webpack/lib/Compiler.js")} WebpackCompiler */
class BilldHtmlWebpackPlugin {
  billdConfig = {
    pluginName: 'BilldHtmlWebpackPlugin',
    NODE_ENV: undefined,
    options: undefined,
    env: undefined,
    envList: ['nuxt2', 'nuxt3', 'nuxt3-6', 'vuecli4', 'vuecli5', 'webpack4', 'webpack5', 'next12', 'vite4'],
    log: {
      pkgName: true,
      pkgVersion: true,
      pkgRepository: true,
      commitSubject: true,
      commitBranch: true,
      committerDate: true,
      commitHash: true,
      committerName: true,
      committerEmail: true,
      lastBuildDate: true
    }
  };

  /**
   * @param {PluginOption} options
   */
  constructor(options) {
    if (!options.env) {
      errorLog(`请传入env属性!`, true);
    } else if (!this.billdConfig.envList.includes(options.env)) {
      errorLog(`env属性必须是: ${this.billdConfig.envList} 中的一个!`, true);
    }
    try {
      this.billdConfig.env = options.env;
      options.log && (this.billdConfig.log = {
        ...this.billdConfig.log,
        ...options.log
      });
      options.NODE_ENV && (this.billdConfig.NODE_ENV = options.NODE_ENV);
    } catch (error) {
      console.log(error);
      errorLog(`配置错误!`, true);
    }
    this.billdConfig.options = options;
    try {
      if (options.env === 'nuxt3') {
        this.config = new PluginConfig$2(this.billdConfig);
      } else if (options.env === 'nuxt3-6') {
        this.config = new PluginConfig$1(this.billdConfig);
      } else if (options.env === 'vite4') {
        this.config = new PluginConfig(this.billdConfig);
      }
    } catch (error) {
      errorLog(error);
    }
  }

  /**
   * @param {WebpackCompiler} compiler
   */
  apply(compiler) {
    try {
      switch (this.billdConfig.options.env) {
        case 'nuxt2':
          new PluginApply$4(compiler, this.billdConfig);
          break;
        case 'vuecli4':
          new PluginApply$3(compiler, this.billdConfig);
          break;
        case 'vuecli5':
          new PluginApply$2(compiler, this.billdConfig);
          break;
        case 'webpack4':
          new PluginApply$1(compiler, this.billdConfig);
          break;
        case 'webpack5':
          new PluginApply(compiler, this.billdConfig);
          break;
        case 'next12':
          new PluginApply$5(compiler, this.billdConfig);
          break;
      }
    } catch (error) {
      errorLog(error);
    }
  }
}
const version = version$1;

exports["default"] = BilldHtmlWebpackPlugin;
exports.logData = logData;
exports.version = version;
