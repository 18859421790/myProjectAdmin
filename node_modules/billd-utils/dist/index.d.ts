/**
 * @description 数组去重，缺点不能去除{}
 * @param {Array} arr
 * @return {*} 不修改原数组，返回新数组
 */
declare const arrayUnique: (arr: Array<any>) => any[];
/**
 * @description 洗牌算法
 * @param {Array} arr
 * @return {*} 不修改原数组，返回新数组
 */
declare const arrayShuffle: (arr: Array<any>) => any[];
/**
 * @description 获取数组交集
 * @param {any} a
 * @param {any} b
 * @return {*}
 */
declare const getArrayIntersection: (a: any[], b: any[]) => any[];
/**
 * @description 获取数组的对称差集（不修改原数组）
 * @example
 * a[1,2,3,4,5],b[3,4,5,6,7],a和b的对称差集:getArraySymmetricDifference(a,b) ===> [1,2,6,7]
 * @param {any} a
 * @param {any} b
 * @return {*}
 */
declare function getArraySymmetricDifference(arr1: any[], arr2: any[]): any[];
/**
 * @description 获取数组差集（不修改原数组）
 * @example
 * a[1,2,3,4,5],b[2,4,6,8,10],a和b的差集:getArrayDifference(a,b) ===> [1,3,5]
 * a[1,2,3,4,5],b[2,4,6,8,10],b和a的差集:getArrayDifference(b,a) ===> [6,8,10]
 * @param {any} a
 * @param {any} b
 * @return {*}
 */
declare const getArrayDifference: (a: any[], b: any[]) => any[];
/**
 * @description 获取数组并集（不修改原数组）
 * @example
 * a[1,2,3],b[3,4,5],a和b的并集:getArrayUnion(a,b) ===> [1,2,3,4,5]
 * @param {any} a
 * @param {any} b
 * @return {*}
 */
declare const getArrayUnion: (a: any[], b: any[]) => any[];

/** 判断是否是ipad */
declare const isIPad: () => boolean;
/**
 * @description 判断是否是移动端（判断比较粗糙）
 * @return {*}
 */
declare const isMobile: () => boolean;
/**
 * @description 判断是否是微信浏览器
 * @return {*}
 */
declare const isWechat: () => boolean;
/**
 * @description 判断设备类型
 * @return {*}
 */
declare const judgeDevice: () => {
    isAndroid: boolean;
    isIphone: boolean;
    isIPad: boolean;
};
/**
 * @description 判断是否是浏览器环境
 * @param {*} boolean
 * @return {*}
 */
declare const isBrowser: () => boolean;
/**
 * @description 判断是否是Safari浏览器
 * @return {*}
 */
declare const isSafari: () => boolean;
/**
 * @description 判断是否是ie浏览器
 * @return {*}
 */
declare const isIe: () => boolean;
/**
 * @description 判断是否是Firefox浏览器
 * @return {*}
 */
declare const isFirefox: () => boolean;
/**
 * @description 判断是否是支持webp
 * @return {*}
 */
declare const isSupportWebp: () => boolean;

/**
 * @description 计算两个dom是否有交集
 * @param {Element} element1
 * @param {Element} element2
 * @return {*}
 */
declare function elementsIsIntersect(element1: Element, element2: Element): boolean;
/**
 * @description 获取dom元素的样式值,注意:如果获取的样式值没有显示的声明,
 * 会获取到它的默认值,比如position没有设置值,获取它的position就会返回static
 * @param {Element} ele
 * @param {*} styleName
 * @return {*}
 */
declare const getStyle: (ele: Element, styleName: string) => any;
/**
 * @description 将内容复制到剪切板
 * @param {string} text
 * @return {*}
 */
declare const copyToClipBoard: (text: string) => void;
/**
 * @description 获取滚动条宽度
 * @copy https://github.com/iview/iview/blob/2.0/src/utils/assist.js#L19
 * @return {*}
 */
declare const getScrollBarSize: () => number;

/**
 * @description 格式化内存大小(要求传入的数字以byte为单位)
 * @param {number} val
 * @param {*} num 显示几位小数,默认2
 * @return {*}
 */
declare const formatMemorySize: (val: number, num?: number) => string;
/**
 * @description 格式化时间
 * @param {number} timetamp
 */
declare const formatDate: (timetamp: number) => {
    year: number;
    month: string | number;
    day: string | number;
    hour: string | number;
    minutes: string | number;
    seconds: string | number;
};

/**
 * @description 获取[min,max]之间的随机整数。
 * @example: getRangeRandom(-10,100) ===> -8
 * @param {number} min
 * @param {number} max
 * @return {*}
 */
declare const getRangeRandom: (min: number, max: number) => number;
/**
 * @description: 随机数组的一个元素
 * @example: getRandomOne([10,2,4,6]) ===> 6
 * @param {any} arr
 * @return {*}
 */
declare const getRandomOne: (arr: any[]) => any;
/**
 * @description 获取随机字符串(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)
 * @example: getRandomString(4) ===> abd3
 * @param {number} length
 * @return {*}
 */
declare const getRandomString: (length: number) => string;
/**
 * @description: 获取随机整数
 * @example: getRandomInt(4) ===> 3251
 * @param {*} length
 * @return {*}
 */
declare const getRandomInt: (length: any) => number;

/**
 * @description 正则验证手机号、邮箱是否合法
 * @param {string} str
 * @param {*} type
 * @return {*}
 */
declare const regVerify: (str: string, type: 'phone' | 'email') => boolean;
/**
 * @description 判断字符串的开头和结尾是否有空格,有空格就返回true,否则返回false
 * @param {string} value
 * @return {*}
 */
declare const judgeStringSpace: (value: string) => boolean;

/**
 * @description 获取地址栏参数(注意:请确保url是http://aaa.com/ds/?aa=1&bb=323这样子的)
 * @return {*}
 */
declare const getUrlParams: (key?: string) => any;

/**
 * @description: 字符串编码
 * @param {string} str
 * @return {*}
 */
declare function strBtoa(str: string): string;
/**
 * @description: 字符串解码
 * @param {string} str
 * @return {*}
 */
declare function strAtob(str: string): string;
/**
 * @description: 异步更新
 * @param {*} fn
 * @return {*}
 */
declare const asyncUpdate: (fn: any, delay?: any) => Promise<unknown>;
/**
 * @description: 模拟ajax请求
 * @param {*} param1
 * @return {*}
 */
declare const mockAjax: ({ flag, delay }: {
    flag?: boolean | undefined;
    delay?: number | undefined;
}) => Promise<{
    code: number;
    data: {
        id: number;
    };
    msg: string;
}>;
/**
 * @description: 将里面盒子等比例适配外层盒子
 * 如果里层盒子的宽或高有一边大于外层盒子的宽或高，可不设置minWidth和minHeight，
 * 如果里层盒子的宽和高都小于外层盒子的宽和高需要设置maxWidth和minWidth一致，maxHeight和minHeight一致
 * @param width           里面的盒子宽度
 * @param height          里面的盒子高度
 * @param maxWidth        外面的盒子最大宽度
 * @param maxHeight       外面的盒子最大高度
 * @param minWidth        外面的盒子最小宽度
 * @param minHeight       外面的盒子最小高度
 * @returns {{width: number, height: number}} 返回适配好的盒子宽高
 */
declare function computeBox({ width, height, maxWidth, maxHeight, minWidth, minHeight, }: {
    width: any;
    height: any;
    maxWidth: any;
    maxHeight: any;
    minWidth: any;
    minHeight: any;
}): {
    width: any;
    height: any;
};
/**
 * @description: 下载图片
 * @param {string} src
 * @param {string} name
 * @return {*}
 */
declare const downloadImg: (src: string, name: string) => void;
/**
 * @description: 跳转(window.location.href)
 * @param {array} arg
 * @return {*}
 */
declare const hrefToTarget: (url: string) => void;
/**
 * @description: 跳转(window.open)
 * @param {array} arg
 * @return {*}
 */
declare const openToTarget: (...arg: any[]) => void;
/**
 * @description: 刷新页面(window.location.reload)
 */
declare const windowReload: () => void;
/**
 * @description: 获取文件后缀
 * @param {string} filename
 * @return {*}
 */
declare const getFileExt: (filename: string) => string;
/**
 * @description: 生成style标签，并挂载到head
 * @example: generateStyle({ '.a': { color: 'red' }, '#b': { color: 'blue' } });
 * 最终会将<style type="text/css">.a{color:red;}#b{color:blue;}</style>挂载到head里
 * @param {number} styleObj
 * @return {*}
 */
declare const generateStyle: (styleObj: Record<string, any>) => void;
/**
 * @description: 图片预加载
 * @example: imgPrereload(['aaa.com/a.webp', 'aaa.com/b.webp']);
 * @param {string} imgList
 * @return {*}
 */
declare const imgPrereload: (imgList: string[]) => Promise<unknown>[];
/**
 * @description: 是否支持0.5px
 * @return {*}
 */
declare const supportHairlines: () => boolean;
/**
 * @description: 让系统卡死一段时间
 * @param {*} duration
 * @return {*}
 */
declare const sleep: (duration?: number) => void;
/**
 * @description: 按屏幕375为基准,生成对应的px值,默认返回单位(px)
 * @param {number} val
 * @param {*} flag
 * @return {*}
 */
declare const pxToDesignPx: (val: number, flag?: boolean) => string | number;
/**
 * @description: 按屏幕375为基准,生成对应的vw值,默认返回单位(vw)
 * @param {number} val
 * @param {*} flag
 * @return {*}
 */
declare const pxToDesignVw: (val: number, flag?: boolean) => string;
/**
 * @description: 删除对象中值为: null, undefined, NaN, ''的属性
 * @param {any} obj
 * @return {*}
 */
declare const deleteUseLessObjectKey: (obj: any) => any;
/**
 * @description: 替换占位符
 * @example: replaceKeyFromValue('Hello {name}',{name:'Word'}) => Hello Word
 * @param {string} str
 * @param {object} obj
 * @return {*}
 */
declare const replaceKeyFromValue: (str: string, obj: Record<string, any>) => string;
/**
 * @description: 判断数据类型
 * @return {*}
 */
declare const judgeType: (obj: any) => 'boolean' | 'number' | 'string' | 'function' | 'array' | 'date' | 'regExp' | 'undefined' | 'null' | 'object';
/**
 * @description: myName或者MyName转化为my-name
 * @copy https://github.com/vueComponent/ant-design-vue/blob/HEAD/antd-tools/generator-types/src/utils.ts
 * @param {string} input
 * @return {*}
 */
declare const toKebabCase: (input: string) => string;
/**
 * @description: myName或者MyName转化为my_name
 * @param {string} input
 * @return {*}
 */
declare const toKebabCase2: (input: string) => string;
/**
 * @description: my-name转化为myName
 * @param {string} input
 * @return {*}
 */
declare const toCamelCased: (input: string) => string;
/**
 * @description: my_name转化为myName
 * @param {string} input
 * @return {*}
 */
declare const toCamelCased2: (input: string) => string;
/**
 * @description: my-name转化为MyName
 * @param {string} input
 * @return {*}
 */
declare const toPascalCase: (input: string) => string;
/**
 * @description: my_name转化为MyName
 * @param {string} input
 * @return {*}
 */
declare const toPascalCase2: (input: string) => string;
/**
 * @description: 使用json进行深克隆
 * @param {*} obj
 * @return {*}
 */
declare const deepCloneByJson: <T>(obj: T) => T;
/**
 * @description: 手写深拷贝，解决循环引用
 * @param {*} object
 * @return {*}
 */
declare const deepClone: <T>(object: T) => T;
/**
 * @description: 防抖函数（Promise）
 * @param {Function} fn 函数
 * @param {number} delay 延迟时间
 * @param {boolean} leading 首次立即执行
 * @return {Promise}
 */
declare const debounce: (fn: any, delay: number, leading?: boolean) => {
    (...args: any[]): Promise<unknown>;
    cancel(): void;
};
/**
 * @description: 节流函数（Promise）
 * @param {Function} fn 函数
 * @param {number} interval 间隔
 * @param {boolean} trailing 最后一次执行
 * @return {Promise}
 */
declare const throttle: (fn: any, interval: number, trailing?: boolean) => (...args: any[]) => Promise<unknown>;
/**
 * @description: 生成uuid（16位）
 * @example: generate() ===> 9d24f135-3e33-46b7-b51f-dc5b8121d60a
 * @return {*}
 */
declare const generateUuid: () => number;

declare class CacheModel {
    prefix: string;
    constructor(prefix: string);
    handlePrefix: (key: string) => string;
    getItem: (key: string) => string | null;
    setItem: (key: string, value: any) => void;
    removeItem: (key: string) => void;
    /**
     * @description 获取缓存
     * @param {string} key
     * @return {*}
     */
    getStorage: <T>(key: string) => T | null;
    /**
     * @description 设置缓存
     * @param {*} key
     * @param {*} value
     */
    setStorage: (key: string, value: any) => void;
    /**
     * @description 清除缓存
     * @param {*} key
     */
    clearStorage: (key: string) => void;
    /**
     * @description 获取缓存,如果缓存已过期,会清除该缓存,并返回null
     * @param {*} key
     */
    getStorageExp: <T>(key: string) => T | null;
    /**
     * @description 设置缓存以及缓存时长
     * @param {*} key
     * @param {*} value
     * @param {*} expires 缓存时长,单位:小时
     */
    setStorageExp: (key: string, value: any, expires: number) => void;
}

declare class LRUCache {
    capacity: number;
    data: Map<any, any>;
    constructor(capacity: number);
    get(key: any): any;
    put(key: any, value: any): void;
}

declare class ConcurrentPoll {
    /** 任务队列 */
    tasks: any[];
    /** 最大并发数 */
    max: number;
    total: number;
    delay: number;
    done: () => void;
    constructor({ max, done, delay }: {
        max?: number | undefined;
        done: any;
        delay?: number | undefined;
    });
    addTask(task: any): void;
    run(): Promise<string> | undefined;
}

declare const utils_arrayUnique: typeof arrayUnique;
declare const utils_arrayShuffle: typeof arrayShuffle;
declare const utils_getArrayIntersection: typeof getArrayIntersection;
declare const utils_getArraySymmetricDifference: typeof getArraySymmetricDifference;
declare const utils_getArrayDifference: typeof getArrayDifference;
declare const utils_getArrayUnion: typeof getArrayUnion;
declare const utils_isIPad: typeof isIPad;
declare const utils_isMobile: typeof isMobile;
declare const utils_isWechat: typeof isWechat;
declare const utils_judgeDevice: typeof judgeDevice;
declare const utils_isBrowser: typeof isBrowser;
declare const utils_isSafari: typeof isSafari;
declare const utils_isIe: typeof isIe;
declare const utils_isFirefox: typeof isFirefox;
declare const utils_isSupportWebp: typeof isSupportWebp;
declare const utils_elementsIsIntersect: typeof elementsIsIntersect;
declare const utils_getStyle: typeof getStyle;
declare const utils_copyToClipBoard: typeof copyToClipBoard;
declare const utils_getScrollBarSize: typeof getScrollBarSize;
declare const utils_formatMemorySize: typeof formatMemorySize;
declare const utils_formatDate: typeof formatDate;
declare const utils_getRangeRandom: typeof getRangeRandom;
declare const utils_getRandomOne: typeof getRandomOne;
declare const utils_getRandomString: typeof getRandomString;
declare const utils_getRandomInt: typeof getRandomInt;
declare const utils_regVerify: typeof regVerify;
declare const utils_judgeStringSpace: typeof judgeStringSpace;
declare const utils_getUrlParams: typeof getUrlParams;
declare const utils_strBtoa: typeof strBtoa;
declare const utils_strAtob: typeof strAtob;
declare const utils_asyncUpdate: typeof asyncUpdate;
declare const utils_mockAjax: typeof mockAjax;
declare const utils_computeBox: typeof computeBox;
declare const utils_downloadImg: typeof downloadImg;
declare const utils_hrefToTarget: typeof hrefToTarget;
declare const utils_openToTarget: typeof openToTarget;
declare const utils_windowReload: typeof windowReload;
declare const utils_getFileExt: typeof getFileExt;
declare const utils_generateStyle: typeof generateStyle;
declare const utils_imgPrereload: typeof imgPrereload;
declare const utils_supportHairlines: typeof supportHairlines;
declare const utils_sleep: typeof sleep;
declare const utils_pxToDesignPx: typeof pxToDesignPx;
declare const utils_pxToDesignVw: typeof pxToDesignVw;
declare const utils_deleteUseLessObjectKey: typeof deleteUseLessObjectKey;
declare const utils_replaceKeyFromValue: typeof replaceKeyFromValue;
declare const utils_judgeType: typeof judgeType;
declare const utils_toKebabCase: typeof toKebabCase;
declare const utils_toKebabCase2: typeof toKebabCase2;
declare const utils_toCamelCased: typeof toCamelCased;
declare const utils_toCamelCased2: typeof toCamelCased2;
declare const utils_toPascalCase: typeof toPascalCase;
declare const utils_toPascalCase2: typeof toPascalCase2;
declare const utils_deepCloneByJson: typeof deepCloneByJson;
declare const utils_deepClone: typeof deepClone;
declare const utils_debounce: typeof debounce;
declare const utils_throttle: typeof throttle;
declare const utils_generateUuid: typeof generateUuid;
type utils_CacheModel = CacheModel;
declare const utils_CacheModel: typeof CacheModel;
type utils_LRUCache = LRUCache;
declare const utils_LRUCache: typeof LRUCache;
type utils_ConcurrentPoll = ConcurrentPoll;
declare const utils_ConcurrentPoll: typeof ConcurrentPoll;
declare namespace utils {
  export {
    utils_arrayUnique as arrayUnique,
    utils_arrayShuffle as arrayShuffle,
    utils_getArrayIntersection as getArrayIntersection,
    utils_getArraySymmetricDifference as getArraySymmetricDifference,
    utils_getArrayDifference as getArrayDifference,
    utils_getArrayUnion as getArrayUnion,
    utils_isIPad as isIPad,
    utils_isMobile as isMobile,
    utils_isWechat as isWechat,
    utils_judgeDevice as judgeDevice,
    utils_isBrowser as isBrowser,
    utils_isSafari as isSafari,
    utils_isIe as isIe,
    utils_isFirefox as isFirefox,
    utils_isSupportWebp as isSupportWebp,
    utils_elementsIsIntersect as elementsIsIntersect,
    utils_getStyle as getStyle,
    utils_copyToClipBoard as copyToClipBoard,
    utils_getScrollBarSize as getScrollBarSize,
    utils_formatMemorySize as formatMemorySize,
    utils_formatDate as formatDate,
    utils_getRangeRandom as getRangeRandom,
    utils_getRandomOne as getRandomOne,
    utils_getRandomString as getRandomString,
    utils_getRandomInt as getRandomInt,
    utils_regVerify as regVerify,
    utils_judgeStringSpace as judgeStringSpace,
    utils_getUrlParams as getUrlParams,
    utils_strBtoa as strBtoa,
    utils_strAtob as strAtob,
    utils_asyncUpdate as asyncUpdate,
    utils_mockAjax as mockAjax,
    utils_computeBox as computeBox,
    utils_downloadImg as downloadImg,
    utils_hrefToTarget as hrefToTarget,
    utils_openToTarget as openToTarget,
    utils_windowReload as windowReload,
    utils_getFileExt as getFileExt,
    utils_generateStyle as generateStyle,
    utils_imgPrereload as imgPrereload,
    utils_supportHairlines as supportHairlines,
    utils_sleep as sleep,
    utils_pxToDesignPx as pxToDesignPx,
    utils_pxToDesignVw as pxToDesignVw,
    utils_deleteUseLessObjectKey as deleteUseLessObjectKey,
    utils_replaceKeyFromValue as replaceKeyFromValue,
    utils_judgeType as judgeType,
    utils_toKebabCase as toKebabCase,
    utils_toKebabCase2 as toKebabCase2,
    utils_toCamelCased as toCamelCased,
    utils_toCamelCased2 as toCamelCased2,
    utils_toPascalCase as toPascalCase,
    utils_toPascalCase2 as toPascalCase2,
    utils_deepCloneByJson as deepCloneByJson,
    utils_deepClone as deepClone,
    utils_debounce as debounce,
    utils_throttle as throttle,
    utils_generateUuid as generateUuid,
    utils_CacheModel as CacheModel,
    utils_LRUCache as LRUCache,
    utils_ConcurrentPoll as ConcurrentPoll,
  };
}

declare const version: string;

export { CacheModel, ConcurrentPoll, LRUCache, arrayShuffle, arrayUnique, asyncUpdate, computeBox, copyToClipBoard, debounce, deepClone, deepCloneByJson, utils as default, deleteUseLessObjectKey, downloadImg, elementsIsIntersect, formatDate, formatMemorySize, generateStyle, generateUuid, getArrayDifference, getArrayIntersection, getArraySymmetricDifference, getArrayUnion, getFileExt, getRandomInt, getRandomOne, getRandomString, getRangeRandom, getScrollBarSize, getStyle, getUrlParams, hrefToTarget, imgPrereload, isBrowser, isFirefox, isIPad, isIe, isMobile, isSafari, isSupportWebp, isWechat, judgeDevice, judgeStringSpace, judgeType, mockAjax, openToTarget, pxToDesignPx, pxToDesignVw, regVerify, replaceKeyFromValue, sleep, strAtob, strBtoa, supportHairlines, throttle, toCamelCased, toCamelCased2, toKebabCase, toKebabCase2, toPascalCase, toPascalCase2, version, windowReload };
