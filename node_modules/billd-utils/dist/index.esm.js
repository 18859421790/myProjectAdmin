import _toConsumableArray from '@babel/runtime-corejs3/helpers/toConsumableArray';
import _Set from '@babel/runtime-corejs3/core-js-stable/set';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _Promise from '@babel/runtime-corejs3/core-js-stable/promise';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import _WeakMap from '@babel/runtime-corejs3/core-js-stable/weak-map';
import _URL from '@babel/runtime-corejs3/core-js-stable/url';
import _createClass from '@babel/runtime-corejs3/helpers/createClass';
import _classCallCheck from '@babel/runtime-corejs3/helpers/classCallCheck';
import _defineProperty from '@babel/runtime-corejs3/helpers/defineProperty';
import _Map from '@babel/runtime-corejs3/core-js-stable/map';
import _keysInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/keys';

var version$1 = "0.0.19";

var arrayUnique = function arrayUnique(arr) {
  return _toConsumableArray(new _Set(arr));
};
var arrayShuffle = function arrayShuffle(arr) {
  var result = _toConsumableArray(arr);
  for (var i = result.length - 1; i >= 0; i -= 1) {
    var randomIndex = Math.floor(Math.random() * (i + 1));
    var randomVal = result[randomIndex];
    result[randomIndex] = result[i];
    result[i] = randomVal;
  }
  return result;
};
var getArrayIntersection = function getArrayIntersection(a, b) {
  return _filterInstanceProperty(a).call(a, function (v) {
    return _indexOfInstanceProperty(b).call(b, v) > -1;
  });
};
function getArraySymmetricDifference(arr1, arr2) {
  var result = [];
  var diff = _filterInstanceProperty(arr1).call(arr1, function (x) {
    return !_includesInstanceProperty(arr2).call(arr2, x);
  });
  var diff2 = _filterInstanceProperty(arr2).call(arr2, function (x) {
    return !_includesInstanceProperty(arr1).call(arr1, x);
  });
  result.push.apply(result, _toConsumableArray(diff));
  result.push.apply(result, _toConsumableArray(diff2));
  return result;
}
var getArrayDifference = function getArrayDifference(a, b) {
  return _filterInstanceProperty(a).call(a, function (v) {
    return _indexOfInstanceProperty(b).call(b, v) === -1;
  });
};
var getArrayUnion = function getArrayUnion(a, b) {
  var _context;
  return _toConsumableArray( /* @__PURE__ */new _Set(_concatInstanceProperty(_context = []).call(_context, _toConsumableArray(a), _toConsumableArray(b))));
};

var isIPad = function isIPad() {
  var ua = navigator.userAgent.toLowerCase();
  var res = ua.match(/iPad/i);
  if (res !== null && res !== void 0 && res.length) {
    return true;
  }
  if (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) {
    return true;
  }
  return false;
};
var isMobile = function isMobile() {
  if (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) {
    return true;
  }
  return /android|ios|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent);
};
var isWechat = function isWechat() {
  return /MicroMessenger/i.test(window.navigator.userAgent);
};
var judgeDevice = function judgeDevice() {
  var ua = navigator.userAgent;
  var isAndroid = /(Android)/i.test(ua);
  var isIphone = /(iPhone|iPad|iPod|iOS)/i.test(ua);
  var isIPadRes = isIPad();
  return {
    isAndroid: isAndroid,
    isIphone: isIphone,
    isIPad: isIPadRes
  };
};
var isBrowser = function isBrowser() {
  return typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
};
var isSafari = function isSafari() {
  return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
};
var isIe = function isIe() {
  var _context, _context2;
  return _indexOfInstanceProperty(_context = navigator.userAgent).call(_context, "MSIE") !== -1 || _indexOfInstanceProperty(_context2 = navigator.userAgent).call(_context2, "Trident") !== -1;
};
var isFirefox = function isFirefox() {
  var _context3;
  return _indexOfInstanceProperty(_context3 = navigator.userAgent).call(_context3, "Firefox") !== -1;
};
var isSupportWebp = function isSupportWebp() {
  var _context4;
  return _indexOfInstanceProperty(_context4 = document.createElement("canvas").toDataURL("image/webp")).call(_context4, "data:image/webp") === 0;
};

function elementsIsIntersect(element1, element2) {
  var rect1 = element1.getBoundingClientRect();
  var rect2 = element2.getBoundingClientRect();
  return rect1.left <= rect2.right && rect1.right >= rect2.left && rect1.top <= rect2.bottom && rect1.bottom >= rect2.top;
}
var getStyle = function getStyle(ele, styleName) {
  if (window.getComputedStyle) {
    return window.getComputedStyle(ele, null)[styleName];
  } else {
    return ele.currentStyle[styleName];
  }
};
var copyToClipBoard = function copyToClipBoard(text) {
  var _oInput$parentElement;
  var oInput = document.createElement("input");
  oInput.value = text;
  document.body.appendChild(oInput);
  oInput.select();
  document.execCommand("Copy");
  (_oInput$parentElement = oInput.parentElement) === null || _oInput$parentElement === void 0 ? void 0 : _oInput$parentElement.removeChild(oInput);
};
var getScrollBarSize = function getScrollBarSize() {
  var inner = document.createElement("div");
  inner.style.width = "100%";
  inner.style.height = "200px";
  var outer = document.createElement("div");
  var outerStyle = outer.style;
  outerStyle.position = "absolute";
  outerStyle.top = "0px";
  outerStyle.left = "0px";
  outerStyle.pointerEvents = "none";
  outerStyle.visibility = "hidden";
  outerStyle.width = "200px";
  outerStyle.height = "150px";
  outerStyle.overflow = "hidden";
  outer.appendChild(inner);
  document.body.appendChild(outer);
  var widthContained = inner.offsetWidth;
  outer.style.overflow = "scroll";
  var widthScroll = inner.offsetWidth;
  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }
  document.body.removeChild(outer);
  return widthContained - widthScroll;
};

var formatMemorySize = function formatMemorySize(val) {
  var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var oneByte = 1;
  var oneKb = oneByte * 1024;
  var oneMb = oneKb * 1024;
  var oneGb = oneMb * 1024;
  var oneTb = oneGb * 1024;
  var format = function format(v) {
    return v.toFixed(num);
  };
  if (val < oneKb) {
    return "".concat(format(val / oneByte), "byte");
  }
  if (val < oneMb) {
    return "".concat(format(val / oneKb), "kb");
  }
  if (val < oneGb) {
    return "".concat(format(val / oneMb), "mb");
  }
  if (val < oneTb) {
    return "".concat(format(val / oneGb), "gb");
  }
  return "".concat(format(val / oneTb), "tb");
};
var formatDate = function formatDate(timetamp) {
  function addDateZero(num) {
    return num < 10 ? "0".concat(num) : num;
  }
  var date = new Date(timetamp);
  return {
    year: date.getFullYear(),
    month: addDateZero(date.getMonth() + 1),
    day: addDateZero(date.getDate()),
    hour: addDateZero(date.getHours()),
    minutes: addDateZero(date.getMinutes()),
    seconds: addDateZero(date.getSeconds())
  };
};

var getRangeRandom = function getRangeRandom(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};
var getRandomOne = function getRandomOne(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
};
var getRandomString = function getRandomString(length) {
  var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var res = "";
  for (var i = 0; i < length; i += 1) {
    res += str.charAt(getRangeRandom(0, str.length - 1));
  }
  return res;
};
var getRandomInt = function getRandomInt(length) {
  var _context;
  if (length > 16 || length < 1) throw new Error("length\u7684\u8303\u56F4:[1,16]");
  var num = +_sliceInstanceProperty(_context = "".concat(Math.random())).call(_context, 2, 2 + length);
  if (String(num).length !== length) {
    num = getRandomInt(length);
  }
  return num;
};

var debugLog = function debugLog(type) {
  var _console, _context;
  for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    data[_key - 1] = arguments[_key];
  }
  (_console = console)[type].apply(_console, _concatInstanceProperty(_context = ["billd-utils"]).call(_context, data));
};

var regVerify = function regVerify(str, type) {
  try {
    switch (type) {
      case "email":
        return /[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+/.test(str);
      case "phone":
        return /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/.test(str);
    }
  } catch (error) {
    debugLog("error", error);
    return false;
  }
};
var judgeStringSpace = function judgeStringSpace(value) {
  var reg1 = /^\s+/g;
  var reg2 = /\s+$/g;
  if (reg1.test(value) || reg2.test(value)) {
    return true;
  }
  return false;
};

var getUrlParams = function getUrlParams(key) {
  var url = decodeURIComponent(window.location.href);
  var str = url.split("?")[1];
  var obj = {};
  if (str) {
    var keys = str.split("&");
    keys.forEach(function (item) {
      var arr = item.split("=");
      obj[arr[0]] = arr[1];
    });
  }
  return key ? obj[key] : obj;
};

function strBtoa(str) {
  return window.btoa(window.encodeURIComponent(str));
}
function strAtob(str) {
  return window.decodeURIComponent(window.atob(str));
}
var asyncUpdate = function asyncUpdate(fn, delay) {
  return new _Promise(function (resolve) {
    setTimeout(function () {
      var res = fn();
      resolve(res);
    }, delay || 0);
  });
};
var mockAjax = function mockAjax(_ref) {
  var _ref$flag = _ref.flag,
    flag = _ref$flag === void 0 ? true : _ref$flag,
    _ref$delay = _ref.delay,
    delay = _ref$delay === void 0 ? 500 : _ref$delay;
  return new _Promise(function (resolve, reject) {
    setTimeout(function () {
      if (flag) {
        resolve({
          code: 200,
          data: {
            id: 1
          },
          msg: "\u8BF7\u6C42\u6210\u529F"
        });
      } else {
        reject({
          code: 400,
          msg: "\u8BF7\u6C42\u5931\u8D25"
        });
      }
    }, delay);
  });
};
function computeBox(_ref2) {
  var width = _ref2.width,
    height = _ref2.height,
    maxWidth = _ref2.maxWidth,
    maxHeight = _ref2.maxHeight,
    minWidth = _ref2.minWidth,
    minHeight = _ref2.minHeight;
  var ratio = height / width;
  var _minWidth = minWidth ? minWidth : 0;
  var _minHeight = minHeight ? minHeight : 0;
  var _width = width;
  var _height = height;
  if (_width < _minWidth) {
    _width = _minWidth;
    _height = _minWidth * ratio;
  }
  if (_height < _minHeight) {
    _width = _minHeight / ratio;
    _height = _minHeight;
  }
  if (_width > maxWidth) {
    _width = maxWidth;
    _height = maxWidth * ratio;
  }
  if (_height > maxHeight) {
    _width = maxHeight / ratio;
    _height = maxHeight;
  }
  return {
    width: _width,
    height: _height
  };
}
var downloadImg = function downloadImg(src, name) {
  var imgEl = new Image();
  imgEl.src = src;
  imgEl.setAttribute("crossOrigin", "anonymous");
  imgEl.onload = function () {
    var canvas = document.createElement("canvas");
    canvas.width = imgEl.width;
    canvas.height = imgEl.height;
    var context = canvas.getContext("2d");
    context.drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);
    var url = canvas.toDataURL("image/png");
    var a = document.createElement("a");
    var event = new MouseEvent("click");
    a.download = name || "\u4E0B\u8F7D\u56FE\u7247\u540D\u79F0";
    a.href = url;
    a.dispatchEvent(event);
  };
  imgEl.onerror = function (e) {
    debugLog("error", "\u4E0B\u8F7D\u56FE\u7247\u51FA\u9519", e);
  };
};
var hrefToTarget = function hrefToTarget(url) {
  window.location.href = url;
};
var openToTarget = function openToTarget() {
  var _window;
  (_window = window).open.apply(_window, arguments);
};
var windowReload = function windowReload() {
  window.location.reload();
};
var getFileExt = function getFileExt(filename) {
  var arr = filename.split(".");
  var ext = arr[arr.length - 1];
  return ext;
};
var generateStyle = function generateStyle(styleObj) {
  var styleEle = document.createElement("style");
  styleEle.type = "text/css";
  var textContent = "";
  function getStyleVal(obj) {
    var str = "";
    _Object$keys(obj).forEach(function (key) {
      var _context;
      str += _concatInstanceProperty(_context = "".concat(key, ":")).call(_context, obj[key], ";");
    });
    return str;
  }
  _Object$keys(styleObj).forEach(function (key) {
    textContent += "".concat(key, "{");
    textContent += getStyleVal(styleObj[key]);
    textContent += "}";
  });
  styleEle.textContent = textContent;
  document.head.appendChild(styleEle);
};
var imgPrereload = function imgPrereload(imgList) {
  return _mapInstanceProperty(imgList).call(imgList, function (url) {
    return new _Promise(function (resolve, reject) {
      var img = new Image();
      img.src = url;
      img.onload = function () {
        return resolve({
          url: url
        });
      };
      img.onerror = function (error) {
        return reject({
          url: url,
          error: error
        });
      };
    });
  });
};
var supportHairlines = function supportHairlines() {
  var fakeBody = document.createElement("body");
  var testElement = document.createElement("div");
  testElement.style.border = ".5px solid transparent";
  fakeBody.appendChild(testElement);
  document.documentElement.appendChild(fakeBody);
  if (testElement.offsetHeight === 1) {
    return true;
  } else {
    return false;
  }
};
var sleep = function sleep() {
};
var pxToDesignPx = function pxToDesignPx(val) {
  var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var px = window.document.documentElement.clientWidth * (val / 375);
  return flag ? "".concat(px, "px") : px;
};
var pxToDesignVw = function pxToDesignVw(val) {
  var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var vw = (val / 375 * 100).toFixed(5);
  return flag ? "".concat(vw, "vw") : vw;
};
var deleteUseLessObjectKey = function deleteUseLessObjectKey(obj) {
  _Object$keys(obj).forEach(function (key) {
    var _context2;
    if (_includesInstanceProperty(_context2 = [null, void 0, NaN, ""]).call(_context2, obj[key])) {
      delete obj[key];
    }
  });
  return obj;
};
var replaceKeyFromValue = function replaceKeyFromValue(str, obj) {
  var res = str;
  _Object$keys(obj).forEach(function (v) {
    res = res.replace(new RegExp("{".concat(v, "}"), "ig"), obj[v]);
  });
  return res;
};
var judgeType = function judgeType(obj) {
  var map = {
    "[object Boolean]": "boolean",
    "[object Number]": "number",
    "[object String]": "string",
    "[object Function]": "function",
    "[object Array]": "array",
    "[object Date]": "date",
    "[object RegExp]": "regExp",
    "[object Undefined]": "undefined",
    "[object Null]": "null",
    "[object Object]": "object"
  };
  return map[Object.prototype.toString.call(obj)];
};
var toKebabCase = function toKebabCase(input) {
  return input.replace(/[A-Z]/g, function (val, index) {
    return (index === 0 ? "" : "-") + val.toLowerCase();
  });
};
var toKebabCase2 = function toKebabCase2(input) {
  return input.replace(/[A-Z]/g, function (val, index) {
    return (index === 0 ? "" : "_") + val.toLowerCase();
  });
};
var toCamelCased = function toCamelCased(input) {
  return input.replace(/-(\w)/g, function (all, letter) {
    return letter.toUpperCase();
  });
};
var toCamelCased2 = function toCamelCased2(input) {
  return input.replace(/_(\w)/g, function (all, letter) {
    return letter.toUpperCase();
  });
};
var toPascalCase = function toPascalCase(input) {
  var res = input.replace(input[0], input[0].toUpperCase());
  return res.replace(/-(\w)/g, function (all, letter) {
    return letter.toUpperCase();
  });
};
var toPascalCase2 = function toPascalCase2(input) {
  var res = input.replace(input[0], input[0].toUpperCase());
  return res.replace(/_(\w)/g, function (all, letter) {
    return letter.toUpperCase();
  });
};
var deepCloneByJson = function deepCloneByJson(obj) {
  return JSON.parse(_JSON$stringify(obj));
};
var deepClone = function deepClone(object) {
  function clone(obj, hash) {
    var newobj = Array.isArray(obj) ? [] : {};
    hash = hash || /* @__PURE__ */new _WeakMap();
    if (hash.has(obj)) {
      return hash.get(obj);
    }
    hash.set(obj, newobj);
    _Object$keys(obj).forEach(function (i) {
      if (obj[i] instanceof Object) {
        newobj[i] = clone(obj[i], hash);
      } else {
        newobj[i] = obj[i];
      }
    });
    return newobj;
  }
  return clone(object, void 0);
};
var debounce = function debounce(fn, delay) {
  var leading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var timer;
  var debounceFn = function debounceFn() {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (timer) {
      clearTimeout(timer);
    }
    return new _Promise(function (resolve) {
      if (leading) {
        var isFirst = false;
        if (!timer) {
          resolve(fn.apply(_this, args));
          isFirst = true;
        }
        timer = setTimeout(function () {
          timer = null;
          if (!isFirst) {
            resolve(fn.apply(_this, args));
          }
        }, delay);
      } else {
        timer = setTimeout(function () {
          resolve(fn.apply(_this, args));
        }, delay);
      }
    });
  };
  debounceFn.cancel = function () {
    clearTimeout(timer);
    timer = null;
  };
  return debounceFn;
};
var throttle = function throttle(fn, interval) {
  var trailing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var lastTime = 0;
  var timer;
  return function () {
    var _this2 = this;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var newTime = new Date().getTime();
    if (timer) {
      clearTimeout(timer);
    }
    var result;
    return new _Promise(function (resolve) {
      if (newTime - lastTime > interval) {
        result = fn.apply(_this2, args);
        resolve(result);
        lastTime = newTime;
      } else if (trailing) {
        timer = setTimeout(function () {
          result = fn.apply(_this2, args);
          resolve(result);
        }, interval);
      }
    });
  };
};
var generateUuid = function generateUuid() {
  var uuid = _URL.createObjectURL(new Blob());
  _URL.revokeObjectURL(uuid);
  return uuid.split("/")[1].length;
};

var CacheModel = /*#__PURE__*/_createClass(function CacheModel(prefix) {
  var _this = this;
  _classCallCheck(this, CacheModel);
  _defineProperty(this, "prefix", "");
  _defineProperty(this, "handlePrefix", function (key) {
    if (_this.prefix === "") {
      return key;
    } else {
      var _context;
      return _concatInstanceProperty(_context = "".concat(_this.prefix)).call(_context, key);
    }
  });
  _defineProperty(this, "getItem", function (key) {
    return localStorage.getItem(_this.handlePrefix(key));
  });
  _defineProperty(this, "setItem", function (key, value) {
    return localStorage.setItem(_this.handlePrefix(key), value);
  });
  _defineProperty(this, "removeItem", function (key) {
    return localStorage.removeItem(_this.handlePrefix(key));
  });
  _defineProperty(this, "getStorage", function (key) {
    try {
      var res = _this.getItem(key);
      if (res) {
        var data = JSON.parse(res);
        if (!data.createTime) {
          _this.clearStorage(key);
          return null;
        } else {
          return data.value;
        }
      }
      return null;
    } catch (error) {
      debugLog("error", error);
      _this.clearStorage(key);
      return null;
    }
  });
  _defineProperty(this, "setStorage", function (key, value) {
    try {
      var createTime = +new Date();
      _this.setItem(key, _JSON$stringify({
        value: value,
        createTime: createTime
      }));
    } catch (error) {
      debugLog("error", error);
      _this.clearStorage(key);
    }
  });
  _defineProperty(this, "clearStorage", function (key) {
    try {
      _this.removeItem(key);
    } catch (error) {
      debugLog("error", error);
    }
  });
  _defineProperty(this, "getStorageExp", function (key) {
    try {
      var res = _this.getItem(key);
      if (res) {
        var data = JSON.parse(res);
        var expireTime = data.expireTime;
        var isExpired = expireTime < +new Date();
        if (!expireTime || isExpired) {
          _this.clearStorage(key);
          return null;
        } else {
          return data.value;
        }
      }
      return null;
    } catch (error) {
      debugLog("error", error);
      _this.clearStorage(key);
      return null;
    }
  });
  _defineProperty(this, "setStorageExp", function (key, value, expires) {
    try {
      var _context2;
      if (_includesInstanceProperty(_context2 = [key, value, expires]).call(_context2, void 0)) {
        debugLog("error", "\u8BF7\u68C0\u67E5\u4F20\u5165\u7684\u53C2\u6570\uFF01");
        return;
      }
      var createTime = +new Date();
      var expireTime = createTime + expires * 60 * 60 * 1e3;
      _this.setItem(key, _JSON$stringify({
        value: value,
        createTime: createTime,
        expireTime: expireTime
      }));
    } catch (error) {
      debugLog("error", error);
      _this.clearStorage(key);
    }
  });
  this.prefix = prefix;
});

var LRUCache = /*#__PURE__*/function () {
  function LRUCache(capacity) {
    _classCallCheck(this, LRUCache);
    _defineProperty(this, "capacity", void 0);
    _defineProperty(this, "data", /* @__PURE__ */new _Map());
    if (capacity < 1) throw new Error("capacity\u5FC5\u987B\u5927\u4E8E1\uFF01");
    this.capacity = capacity;
  }
  _createClass(LRUCache, [{
    key: "get",
    value: function get(key) {
      var data = this.data;
      var value = data.get(key);
      if (!data.has(key)) return null;
      data.delete(key);
      data.set(key, value);
      return value;
    }
  }, {
    key: "put",
    value: function put(key, value) {
      var data = this.data;
      if (data.has(key)) {
        data.delete(key);
      }
      data.set(key, value);
      if (data.size > this.capacity) {
        data.delete(_keysInstanceProperty(data).call(data).next().value);
      }
    }
  }]);
  return LRUCache;
}();

var ConcurrentPoll = /*#__PURE__*/function () {
  function ConcurrentPoll(_ref) {
    var _this = this;
    var _ref$max = _ref.max,
      max = _ref$max === void 0 ? 5 : _ref$max,
      done = _ref.done,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 0 : _ref$delay;
    _classCallCheck(this, ConcurrentPoll);
    _defineProperty(this, "tasks", []);
    _defineProperty(this, "max", 0);
    _defineProperty(this, "total", 0);
    _defineProperty(this, "delay", 0);
    _defineProperty(this, "done", void 0);
    this.tasks = [];
    this.total = 0;
    this.max = max;
    this.done = done;
    this.delay = delay;
    setTimeout(function () {
      _this.run();
    }, 0);
  }
  _createClass(ConcurrentPoll, [{
    key: "addTask",
    value: function addTask(task) {
      this.tasks.push(task);
      this.total += 1;
    }
  }, {
    key: "run",
    value: function run() {
      var _this2 = this;
      if (this.tasks.length === 0) {
        return _Promise.resolve("");
      }
      var min = Math.min(this.tasks.length, this.max);
      for (var i = 0; i < min; i += 1) {
        this.max -= 1;
        var task = this.tasks.shift();
        task().then(function () {}).catch(function (error) {
          debugLog("error", error);
        }).finally(function () {
          setTimeout(function () {
            _this2.max += 1;
            _this2.total -= 1;
            _this2.run();
            if (_this2.total === 0) {
              var _this2$done;
              (_this2$done = _this2.done) === null || _this2$done === void 0 ? void 0 : _this2$done.call(_this2);
            }
          }, _this2.delay);
        });
      }
    }
  }]);
  return ConcurrentPoll;
}();

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  arrayUnique: arrayUnique,
  arrayShuffle: arrayShuffle,
  getArrayIntersection: getArrayIntersection,
  getArraySymmetricDifference: getArraySymmetricDifference,
  getArrayDifference: getArrayDifference,
  getArrayUnion: getArrayUnion,
  isIPad: isIPad,
  isMobile: isMobile,
  isWechat: isWechat,
  judgeDevice: judgeDevice,
  isBrowser: isBrowser,
  isSafari: isSafari,
  isIe: isIe,
  isFirefox: isFirefox,
  isSupportWebp: isSupportWebp,
  elementsIsIntersect: elementsIsIntersect,
  getStyle: getStyle,
  copyToClipBoard: copyToClipBoard,
  getScrollBarSize: getScrollBarSize,
  formatMemorySize: formatMemorySize,
  formatDate: formatDate,
  getRangeRandom: getRangeRandom,
  getRandomOne: getRandomOne,
  getRandomString: getRandomString,
  getRandomInt: getRandomInt,
  regVerify: regVerify,
  judgeStringSpace: judgeStringSpace,
  getUrlParams: getUrlParams,
  strBtoa: strBtoa,
  strAtob: strAtob,
  asyncUpdate: asyncUpdate,
  mockAjax: mockAjax,
  computeBox: computeBox,
  downloadImg: downloadImg,
  hrefToTarget: hrefToTarget,
  openToTarget: openToTarget,
  windowReload: windowReload,
  getFileExt: getFileExt,
  generateStyle: generateStyle,
  imgPrereload: imgPrereload,
  supportHairlines: supportHairlines,
  sleep: sleep,
  pxToDesignPx: pxToDesignPx,
  pxToDesignVw: pxToDesignVw,
  deleteUseLessObjectKey: deleteUseLessObjectKey,
  replaceKeyFromValue: replaceKeyFromValue,
  judgeType: judgeType,
  toKebabCase: toKebabCase,
  toKebabCase2: toKebabCase2,
  toCamelCased: toCamelCased,
  toCamelCased2: toCamelCased2,
  toPascalCase: toPascalCase,
  toPascalCase2: toPascalCase2,
  deepCloneByJson: deepCloneByJson,
  deepClone: deepClone,
  debounce: debounce,
  throttle: throttle,
  generateUuid: generateUuid,
  CacheModel: CacheModel,
  LRUCache: LRUCache,
  ConcurrentPoll: ConcurrentPoll
});

var version = version$1;

export { CacheModel, ConcurrentPoll, LRUCache, arrayShuffle, arrayUnique, asyncUpdate, computeBox, copyToClipBoard, debounce, deepClone, deepCloneByJson, utils as default, deleteUseLessObjectKey, downloadImg, elementsIsIntersect, formatDate, formatMemorySize, generateStyle, generateUuid, getArrayDifference, getArrayIntersection, getArraySymmetricDifference, getArrayUnion, getFileExt, getRandomInt, getRandomOne, getRandomString, getRangeRandom, getScrollBarSize, getStyle, getUrlParams, hrefToTarget, imgPrereload, isBrowser, isFirefox, isIPad, isIe, isMobile, isSafari, isSupportWebp, isWechat, judgeDevice, judgeStringSpace, judgeType, mockAjax, openToTarget, pxToDesignPx, pxToDesignVw, regVerify, replaceKeyFromValue, sleep, strAtob, strBtoa, supportHairlines, throttle, toCamelCased, toCamelCased2, toKebabCase, toKebabCase2, toPascalCase, toPascalCase2, version, windowReload };
